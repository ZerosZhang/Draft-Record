<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="MIP2V44">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DisplayImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="GenColorImage" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="LabelResult" base_type="ctrl" dimension="0"/>
<par name="LowLimit" base_type="ctrl" dimension="0"/>
<par name="HighLimit" base_type="ctrl" dimension="0"/>
<par name="ValueResult" base_type="ctrl" dimension="0"/>
<par name="OKNGResult" base_type="ctrl" dimension="0"/>
<par name="Result" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try    </l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c>    * 对全图进行平滑</c>
<l>    median_image (Image, Image, 'circle', 9, 'mirrored')</l>
<l>    mean_image (Image, Image, 3, 3)</l>
<c>    </c>
<c>    * 提取有效区域</c>
<l>    threshold (Image, Region, 0, 32767)</l>
<l>    connection (Region, ConnectedRegions)</l>
<l>    select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<l>    area_center (SelectedRegions, Area, _, _)</l>
<l>    if (Area &lt; Width * Height * 0.4 or Area &gt; Width * Height * 0.6 )</l>
<l>        throw ([10001, '待测区域面积异常'])</l>
<l>    endif</l>
<c>    </c>
<c>    * 旋转产品至0°</c>
<l>    shape_trans (SelectedRegions, RegionTrans, 'rectangle2')</l>
<l>    area_center (RegionTrans, _, CenterRow, CenterColumn)</l>
<l>    orientation_region (RegionTrans, Phi)</l>
<l>    CenterAngle := 0</l>
<l>    PI := 3.1415926535</l>
<l>    if (Phi &gt; PI/2)</l>
<l>        CenterAngle := Phi - PI</l>
<l>    endif</l>
<c>    </c>
<l>    if (Phi &lt; -PI/2)</l>
<l>        CenterAngle := Phi + PI</l>
<l>    endif</l>
<l>    vector_angle_to_rigid (CenterRow, CenterColumn, CenterAngle, CenterRow, CenterColumn, 0, HomMat2D)</l>
<l>    affine_trans_image (Image, RotateImage, HomMat2D, 'constant', 'false')</l>
<c>    </c>
<c>    * 十字校正</c>
<l>    Horizontal_Distance := 300</l>
<l>    Vertical_Distance := 200</l>
<l>    Correction_Size := 4</l>
<l>    Left := [CenterRow, CenterColumn - Horizontal_Distance]</l>
<l>    Right := [CenterRow, CenterColumn + Horizontal_Distance]</l>
<l>    Up := [CenterRow - Vertical_Distance, CenterColumn]</l>
<l>    Down := [CenterRow + Vertical_Distance, CenterColumn]</l>
<l>    cross_correction (RotateImage, CorrectionImage, Left, Right, Up, Down, Result)</l>
<l>    if (Result != 0)</l>
<l>        throw ([10002, '十字校正失败'])</l>
<l>    endif</l>
<c>    </c>
<l>    write_image (CorrectionImage, 'tiff', 0, 'C:/Users/zeros/Downloads/2.tiff')</l>
<c>    </c>
<c>    * 计算翘曲度</c>
<l>    PixelScale := 0.1</l>
<l>    _distance1 := 38 / PixelScale / 2.0</l>
<l>    _distance2 := 64 / PixelScale / 2.0</l>
<l>    _distance3 := 75 / PixelScale / 2.0</l>
<l>    _distance6 := 101 / PixelScale / 2.0</l>
<l>    _distance4 := 20 / PixelScale / 2.0</l>
<l>    _distance5 := 40 / PixelScale / 2.0</l>
<c>    </c>
<l>    _position_x1 := CenterColumn - _distance3</l>
<l>    _position_x2 := CenterColumn - _distance2</l>
<l>    _position_x3 := CenterColumn - _distance1</l>
<l>    _position_x4 := CenterColumn</l>
<l>    _position_x5 := CenterColumn + _distance1</l>
<l>    _position_x6 := CenterColumn + _distance2</l>
<l>    _position_x7 := CenterColumn + _distance3</l>
<l>    _position_x8 := CenterColumn - _distance6</l>
<l>    _position_x9 := CenterColumn + _distance6</l>
<c>    </c>
<l>    _position_y1 := CenterRow - _distance5</l>
<l>    _position_y2 := CenterRow - _distance4</l>
<l>    _position_y3 := CenterRow </l>
<l>    _position_y4 := CenterRow + _distance4</l>
<l>    _position_y5 := CenterRow + _distance5</l>
<c>    </c>
<l>    _length := 2</l>
<c>    </c>
<l>    gen_rectangle1 (Rectangle1, _position_y3-_length, _position_x4-_length, _position_y3 + _length, _position_x4 + _length)</l>
<l>    gen_rectangle1 (Rectangle2, _position_y1-_length, _position_x4-_length, _position_y1 + _length, _position_x4 + _length)</l>
<l>    gen_rectangle1 (Rectangle3, _position_y1-_length, _position_x3-_length, _position_y1 + _length, _position_x3 + _length)</l>
<l>    gen_rectangle1 (Rectangle4, _position_y1-_length, _position_x1-_length, _position_y1 + _length, _position_x1 + _length)</l>
<l>    gen_rectangle1 (Rectangle5, _position_y3-_length, _position_x8-_length, _position_y3 + _length, _position_x8 + _length)</l>
<l>    gen_rectangle1 (Rectangle6, _position_y3-_length, _position_x1-_length, _position_y3 + _length, _position_x1 + _length)</l>
<l>    gen_rectangle1 (Rectangle7, _position_y3-_length, _position_x3-_length, _position_y3 + _length, _position_x3 + _length)</l>
<l>    gen_rectangle1 (Rectangle8, _position_y5-_length, _position_x1-_length, _position_y5 + _length, _position_x1 + _length)</l>
<l>    gen_rectangle1 (Rectangle9, _position_y5-_length, _position_x3-_length, _position_y5 + _length, _position_x3 + _length)</l>
<l>    gen_rectangle1 (Rectangle10, _position_y5-_length, _position_x4-_length, _position_y5 + _length, _position_x4 + _length)</l>
<l>    gen_rectangle1 (Rectangle11, _position_y5-_length, _position_x5-_length, _position_y5 + _length, _position_x5 + _length)</l>
<l>    gen_rectangle1 (Rectangle12, _position_y5-_length, _position_x7-_length, _position_y5 + _length, _position_x7 + _length)</l>
<l>    gen_rectangle1 (Rectangle13, _position_y3-_length, _position_x9-_length, _position_y3 + _length, _position_x9 + _length)</l>
<l>    gen_rectangle1 (Rectangle14, _position_y3-_length, _position_x7-_length, _position_y3 + _length, _position_x7 + _length)</l>
<l>    gen_rectangle1 (Rectangle15, _position_y3-_length, _position_x5-_length, _position_y3 + _length, _position_x5 + _length)</l>
<l>    gen_rectangle1 (Rectangle16, _position_y1-_length, _position_x7-_length, _position_y1 + _length, _position_x7 + _length)</l>
<l>    gen_rectangle1 (Rectangle17, _position_y1-_length, _position_x5-_length, _position_y1 + _length, _position_x5 + _length)</l>
<l>    gen_rectangle1 (Rectangle18, _position_y3-_length, _position_x2-_length, _position_y3 + _length, _position_x2 + _length)</l>
<l>    gen_rectangle1 (Rectangle19, _position_y3-_length, _position_x6-_length, _position_y3 + _length, _position_x6 + _length)</l>
<l>    gen_rectangle1 (Rectangle20, _position_y2-_length, _position_x1-_length, _position_y2 + _length, _position_x1 + _length)</l>
<l>    gen_rectangle1 (Rectangle21, _position_y2-_length, _position_x3-_length, _position_y2 + _length, _position_x3 + _length)</l>
<l>    gen_rectangle1 (Rectangle22, _position_y2-_length, _position_x4-_length, _position_y2 + _length, _position_x4 + _length)</l>
<l>    gen_rectangle1 (Rectangle23, _position_y2-_length, _position_x5-_length, _position_y2 + _length, _position_x5 + _length)</l>
<l>    gen_rectangle1 (Rectangle24, _position_y2-_length, _position_x7-_length, _position_y2 + _length, _position_x7 + _length)</l>
<l>    gen_rectangle1 (Rectangle25, _position_y4-_length, _position_x1-_length, _position_y4 + _length, _position_x1 + _length)</l>
<l>    gen_rectangle1 (Rectangle26, _position_y4-_length, _position_x3-_length, _position_y4 + _length, _position_x3 + _length)</l>
<l>    gen_rectangle1 (Rectangle27, _position_y4-_length, _position_x4-_length, _position_y4 + _length, _position_x4 + _length)</l>
<l>    gen_rectangle1 (Rectangle28, _position_y4-_length, _position_x5-_length, _position_y4 + _length, _position_x5 + _length)</l>
<l>    gen_rectangle1 (Rectangle29, _position_y4-_length, _position_x7-_length, _position_y4 + _length, _position_x7 + _length)</l>
<c>    </c>
<l>    gray_features (Rectangle1, CorrectionImage, 'mean', Value01)</l>
<l>    gray_features (Rectangle2, CorrectionImage, 'mean', Value02)</l>
<l>    gray_features (Rectangle3, CorrectionImage, 'mean', Value03)</l>
<l>    gray_features (Rectangle4, CorrectionImage, 'mean', Value04)</l>
<l>    gray_features (Rectangle5, CorrectionImage, 'mean', Value05)</l>
<l>    gray_features (Rectangle6, CorrectionImage, 'mean', Value06)</l>
<l>    gray_features (Rectangle7, CorrectionImage, 'mean', Value07)</l>
<l>    gray_features (Rectangle8, CorrectionImage, 'mean', Value08)</l>
<l>    gray_features (Rectangle9, CorrectionImage, 'mean', Value09)</l>
<l>    gray_features (Rectangle10, CorrectionImage, 'mean', Value10)</l>
<l>    gray_features (Rectangle11, CorrectionImage, 'mean', Value11)</l>
<l>    gray_features (Rectangle12, CorrectionImage, 'mean', Value12)</l>
<l>    gray_features (Rectangle13, CorrectionImage, 'mean', Value13)</l>
<l>    gray_features (Rectangle14, CorrectionImage, 'mean', Value14)</l>
<l>    gray_features (Rectangle15, CorrectionImage, 'mean', Value15)</l>
<l>    gray_features (Rectangle16, CorrectionImage, 'mean', Value16)</l>
<l>    gray_features (Rectangle17, CorrectionImage, 'mean', Value17)</l>
<l>    gray_features (Rectangle18, CorrectionImage, 'mean', Value18)</l>
<l>    gray_features (Rectangle19, CorrectionImage, 'mean', Value19)</l>
<l>    gray_features (Rectangle20, CorrectionImage, 'mean', Value20)</l>
<l>    gray_features (Rectangle21, CorrectionImage, 'mean', Value21)</l>
<l>    gray_features (Rectangle22, CorrectionImage, 'mean', Value22)</l>
<l>    gray_features (Rectangle23, CorrectionImage, 'mean', Value23)</l>
<l>    gray_features (Rectangle24, CorrectionImage, 'mean', Value24)</l>
<l>    gray_features (Rectangle25, CorrectionImage, 'mean', Value25)</l>
<l>    gray_features (Rectangle26, CorrectionImage, 'mean', Value26)</l>
<l>    gray_features (Rectangle27, CorrectionImage, 'mean', Value27)</l>
<l>    gray_features (Rectangle28, CorrectionImage, 'mean', Value28)</l>
<l>    gray_features (Rectangle29, CorrectionImage, 'mean', Value29)</l>
<c>    </c>
<l>    GrayCoefficient := 0.002</l>
<l>    H1 := (Value01 - (Value07 + Value15)/2.0) * GrayCoefficient</l>
<l>    H2 := (Value01 - (Value06 + Value14)/2.0) * GrayCoefficient</l>
<l>    H2_1 := (Value01 - (Value18 + Value19)/2.0) * GrayCoefficient</l>
<l>    HH := H1 - H2_1</l>
<l>    H3 := (Value01 - (Value05 + Value13)/2.0) * GrayCoefficient</l>
<l>    H4_1 := (Value07 - (Value01 + Value06)/2.0) * GrayCoefficient</l>
<l>    H4_2 := (Value15 - (Value01 + Value14)/2.0) * GrayCoefficient</l>
<l>    H4_3 := (Value07 - (Value01 + Value18)/2.0) * GrayCoefficient</l>
<l>    H4_4 := (Value15 - (Value01 + Value19)/2.0) * GrayCoefficient</l>
<l>    H5_1 := (Value06 - (Value05 + Value07)/2.0) * GrayCoefficient</l>
<l>    H5_2 := (Value14 - (Value13 + Value15)/2.0) * GrayCoefficient</l>
<l>    H5_3 := (Value18 - (Value05 + Value07)/2.0) * GrayCoefficient</l>
<l>    H5_4 := (Value19 - (Value13 + Value15)/2.0) * GrayCoefficient</l>
<l>    H6 := (Value01 - (Value02 + Value10)/2.0) * GrayCoefficient</l>
<l>    H7 := (Value07 - (Value03 + Value09)/2.0) * GrayCoefficient</l>
<l>    H8 := (Value15 - (Value11 + Value17)/2.0) * GrayCoefficient</l>
<l>    H9 := (Value06 - (Value04 + Value08)/2.0) * GrayCoefficient</l>
<l>    H10 := (Value14 - (Value16 + Value12)/2.0) * GrayCoefficient</l>
<l>    H11 := (Value22 - (Value01 + Value02)/2.0) * GrayCoefficient</l>
<l>    H12 := (Value27 - (Value01 + Value10)/2.0) * GrayCoefficient</l>
<l>    H13 := (Value21 - (Value03 + Value07)/2.0) * GrayCoefficient</l>
<l>    H14 := (Value26 - (Value07 + Value09)/2.0) * GrayCoefficient</l>
<l>    H15 := (Value20 - (Value04 + Value06)/2.0) * GrayCoefficient</l>
<l>    H16 := (Value25 - (Value06 + Value08)/2.0) * GrayCoefficient</l>
<l>    H17 := (Value23 - (Value15 + Value17)/2.0) * GrayCoefficient</l>
<l>    H18 := (Value28 - (Value11 + Value15)/2.0) * GrayCoefficient</l>
<l>    H19 := (Value24 - (Value14 + Value16)/2.0) * GrayCoefficient</l>
<l>    H20 := (Value29 - (Value12 + Value14)/2.0) * GrayCoefficient</l>
<c>    </c>
<c>    * 生成彩虹图</c>
<l>    if (GenColorImage)</l>
<l>        threshold (CorrectionImage, Region, -10000, 10000)</l>
<l>        connection (Region, ConnectedRegions)</l>
<l>        select_shape_std (ConnectedRegions, SelectedRegions1, 'max_area', 70)</l>
<l>        depth_color (CorrectionImage, SelectedRegions, DisplayImage, GrayCoefficient, Result)</l>
<l>        if (Result != 0)</l>
<l>            throw ([10003, '生成彩虹图失败'])</l>
<l>        endif</l>
<l>    else</l>
<l>        open_window (0, 0, Width, Height, 0, 'buffer', '', WindowHandle)</l>
<l>        set_part (WindowHandle, 0, 0, Height, Width)</l>
<l>        disp_image (Image, WindowHandle)</l>
<l>        set_line_width (WindowHandle, 5)</l>
<l>        set_draw (WindowHandle, 'margin')</l>
<l>        set_color (WindowHandle, 'cornflower blue')</l>
<l>        display_length := 10</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x4-display_length, _position_y3 + display_length, _position_x4 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y1-display_length, _position_x4-display_length, _position_y1 + display_length, _position_x4 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y1-display_length, _position_x3-display_length, _position_y1 + display_length, _position_x3 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y1-display_length, _position_x1-display_length, _position_y1 + display_length, _position_x1 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x8-display_length, _position_y3 + display_length, _position_x8 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x1-display_length, _position_y3 + display_length, _position_x1 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x3-display_length, _position_y3 + display_length, _position_x3 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y5-display_length, _position_x1-display_length, _position_y5 + display_length, _position_x1 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y5-display_length, _position_x3-display_length, _position_y5 + display_length, _position_x3 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y5-display_length, _position_x4-display_length, _position_y5 + display_length, _position_x4 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y5-display_length, _position_x5-display_length, _position_y5 + display_length, _position_x5 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y5-display_length, _position_x7-display_length, _position_y5 + display_length, _position_x7 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x9-display_length, _position_y3 + display_length, _position_x9 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x7-display_length, _position_y3 + display_length, _position_x7 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x5-display_length, _position_y3 + display_length, _position_x5 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y1-display_length, _position_x7-display_length, _position_y1 + display_length, _position_x7 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y1-display_length, _position_x5-display_length, _position_y1 + display_length, _position_x5 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x2-display_length, _position_y3 + display_length, _position_x2 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y3-display_length, _position_x6-display_length, _position_y3 + display_length, _position_x6 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y2-display_length, _position_x1-display_length, _position_y2 + display_length, _position_x1 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y2-display_length, _position_x3-display_length, _position_y2 + display_length, _position_x3 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y2-display_length, _position_x4-display_length, _position_y2 + display_length, _position_x4 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y2-display_length, _position_x5-display_length, _position_y2 + display_length, _position_x5 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y2-display_length, _position_x7-display_length, _position_y2 + display_length, _position_x7 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y4-display_length, _position_x1-display_length, _position_y4 + display_length, _position_x1 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y4-display_length, _position_x3-display_length, _position_y4 + display_length, _position_x3 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y4-display_length, _position_x4-display_length, _position_y4 + display_length, _position_x4 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y4-display_length, _position_x5-display_length, _position_y4 + display_length, _position_x5 + display_length)</l>
<l>        disp_rectangle1 (WindowHandle, _position_y4-display_length, _position_x7-display_length, _position_y4 + display_length, _position_x7 + display_length)</l>
<l>        dump_window_image (DisplayImage, WindowHandle)</l>
<l>        close_window (WindowHandle)</l>
<l>    endif</l>
<c>    </c>
<l>    LabelResult := ['H1','H2','H2_1','HH','H3','H4_1','H4_2','H4_3','H4_4','H5_1','H5_2','H5_3','H5_4','H6','H7','H8','H9','H10','H11','H12','H13','H14','H15','H16','H17','H18','H19','H20']</l>
<l>    LowLimit := [-0.01, 0, 0, -999, 0, 0, 0, -0.015, -0.015, -0.08, -0.08, -0.05, -0.05, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.03, -0.03, -0.01, -0.01, -0.03, -0.03]</l>
<l>    HighLimit := [0.05, 0.16, 0.16, -0.01, 0.2, 0.1, 0.1, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.05, 0.05, 0.05, 0.05, 0.04, 0.04, 0.05, 0.05, 0.04, 0.04]</l>
<l>    ValueResult:= [H1, H2, H2_1, HH, H3, H4_1, H4_2, H4_3, H4_4, H5_1, H5_2, H5_3, H5_4, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20]</l>
<l>    tuple_gen_const (|ValueResult|, 0, OKNGResult)</l>
<l>    for Index := 0 to |ValueResult|-1 by 1</l>
<l>        OKNGResult[Index] := LowLimit[Index] &lt; ValueResult[Index] and ValueResult[Index] &lt; HighLimit[Index]</l>
<l>    endfor</l>
<c>    </c>
<l>    Result := 0</l>
<c>    </c>
<l>catch (Exception)</l>
<l>    Result := Exception</l>
<l>endtry</l>
</body>
<docu id="MIP2V44">
<parameters>
<parameter id="DisplayImage"/>
<parameter id="GenColorImage"/>
<parameter id="HighLimit"/>
<parameter id="Image"/>
<parameter id="LabelResult"/>
<parameter id="LowLimit"/>
<parameter id="OKNGResult"/>
<parameter id="Result"/>
<parameter id="ValueResult"/>
</parameters>
</docu>
</procedure>
</hdevelop>
