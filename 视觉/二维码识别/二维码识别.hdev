<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c>* This program demonstrates how to preproccess of a symbol</c>
<c>* with gaps, modules of different color, and a distorted quiet zone</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* Get the image and display it</c>
<l>read_image (Image, 'C:/Users/ZerosZhang/Desktop/微信图片_20220908140152.jpg')</l>
<c></c>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Display short description</c>
<l>Message := 'This program demonstrates the'</l>
<l>Message[1] := 'preproccessing of a data code symbol'</l>
<l>Message[2] := 'with gaps, modules of different color'</l>
<l>Message[3] := 'and a distorted quiet zone.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Step 1: Create a 2d data code model</c>
<c>* -------------------------------------------------------</c>
<c>* Create a 2d data code model of the 2d data code class</c>
<c>* 'Data Matrix ECC 200' with 'default_parameters' set to</c>
<c>* 'enhanced_recognition'.</c>
<l>create_data_code_2d_model ('Data Matrix ECC 200', 'default_parameters', 'enhanced_recognition', DataCodeHandle)</l>
<c>* </c>
<c>* Set the parameters to the biggest allowed module gap</c>
<l>set_data_code_2d_param (DataCodeHandle, ['module_gap_min','module_gap_max'], ['no','big'])</l>
<c>* </c>
<c>* Try to find and decode the data codes</c>
<l>find_data_code_2d (Image, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</l>
<c>* </c>
<c>* Preprocessing</c>
<c>* -----------------------------------------------</c>
<c>* If no data code was found preprocess the image,</c>
<c>* first with gray value morphology and then with</c>
<c>* median filtering, and search for the symbol again</c>
<l>if (|ResultHandles| == 0)</l>
<c>    * </c>
<c>    * Preprocess with gray value morphology</c>
<l>    gray_opening_shape (Image, ImageOpening, 7, 7, 'octagon')</l>
<c>    * </c>
<c>    * Find and decode the data codes</c>
<l>    find_data_code_2d (ImageOpening, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</l>
<c>    * </c>
<c>    * Display result</c>
<l>    dev_display (ImageOpening)</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    disp_message (WindowHandle, 'Preprocessing: Gray value opening', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle, 'Decoded string: ' + DecodedDataStrings, 'window', 40, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Preprocess with median filtering</c>
<l>    median_image (Image, ImageMedian, 'circle', 3, 'continued')</l>
<c>    * </c>
<c>    * Find and decode the data codes</c>
<l>    find_data_code_2d (ImageMedian, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</l>
<c>    * </c>
<c>    * Display result</c>
<l>    dev_display (ImageMedian)</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    disp_message (WindowHandle, 'Preprocessing:  Median filtering', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle, 'Decoded string: ' + DecodedDataStrings, 'window', 40, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>else</l>
<c>    * </c>
<c>    * Display the results if no preprocessing</c>
<c>    * was necessary</c>
<l>    dev_display (Image)</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    disp_message (WindowHandle, 'Decoding successful\nNo preprocessing necessary', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle, 'Decoded string: ' + DecodedDataStrings, 'window', 60, 12, 'black', 'true')</l>
<l>endif</l>
<c>​​</c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
